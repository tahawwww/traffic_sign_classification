# -*- coding: utf-8 -*-
"""training,testing,saving model (CNN_traffic_classification).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10EE4sroaL_u1WkDhNsgmLZq_qZScRPcj
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import cv2
import tensorflow as tf
from PIL import Image
import os
os.chdir('/content/drive/MyDrive/traffic_Data')
from sklearn.model_selection import train_test_split
from keras.utils import to_categorical
from keras.models import Sequential, load_model
from keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout

data = []
labels = []
# We have 58 Classes
classes = 58
cur_path = os.getcwd()

cur_path

for i in range(classes):
    path = os.path.join(cur_path,'DATA',str(i))
    images = os.listdir(path)
    for a in images:
        try:
            image = Image.open(path + '/'+ a)
            image = image.resize((30,30))
            image = np.array(image)
            data.append(image)
            labels.append(i)
        except Exception as e:
            print(e)

data = np.array(data)
labels = np.array(labels)

np.save('/content/drive/MyDrive/traffic_Data/DATA',data)
np.save('/content/drive/MyDrive/traffic_Data/TEST',labels)

data=np.load('/content/drive/MyDrive/traffic_Data/DATA.npy')
labels=np.load('/content/drive/MyDrive/traffic_Data/TEST.npy')

print(data.shape, labels.shape)

X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=0)

print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

y_train = to_categorical(y_train, 58)
y_test = to_categorical(y_test, 58)

model = Sequential()

model.add(Conv2D(filters=32, kernel_size=(5,5), activation='relu', input_shape=X_train.shape[1:]))
model.add(Conv2D(filters=32, kernel_size=(5,5), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Dropout(rate=0.25))

model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Dropout(rate=0.25))

model.add(Flatten())

model.add(Dense(256, activation='relu'))
model.add(Dropout(rate=0.5))
# We have 58 classes that's why we have defined 58 in the dense
model.add(Dense(58, activation='softmax'))

#Compilation of the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

epochs = 20
history = model.fit(X_train, y_train, batch_size=32, epochs=epochs, validation_data=(X_test, y_test))

# accuracy
plt.figure(0)
plt.plot(history.history['accuracy'], label='training accuracy')
plt.plot(history.history['val_accuracy'], label='val accuracy')
plt.title('Accuracy')
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.legend()
plt.show()

# Loss
plt.plot(history.history['loss'], label='training loss')
plt.plot(history.history['val_loss'], label='val loss')
plt.title('Loss')
plt.xlabel('epochs')
plt.ylabel('loss')
plt.legend()
plt.show()

model.save('/content/drive/MyDrive/models/CNN_traffic_recognition.h5')

import pandas as pd

# Load the CSV file
file_path = '/content/drive/MyDrive/labels.csv'  # Update with your actual file path
labels_df = pd.read_csv(file_path)

# Convert the DataFrame to a dictionary
labels_dict = labels_df.to_dict(orient='list')

# Display the dictionary

labels_dict

import pandas as pd

# Load the CSV file
file_path = '/content/drive/MyDrive/labels.csv'  # Update with your actual file path
labels_df = pd.read_csv(file_path)

# Convert the DataFrame to a list of lists
labels_list = labels_df.values.tolist() # Use .values.tolist() to get a list of lists

# Display the list
print(labels_list)

# prompt: give me the precited text of the model

# Assuming 'image' is the image you want to predict
image = Image.open('/content/drive/MyDrive/traffic_Data/DATA/2/002_0002.png')  # Replace with the actual path
image = image.resize((30, 30))
image = np.array(image)
image = np.expand_dims(image, axis=0)

# Predict the class
prediction = model.predict(image)
predicted_class_index = np.argmax(prediction)

# Get the predicted text from the labels_list
predicted_text = labels_list[predicted_class_index][1]  # Index 1 assumes the text is in the second column

print("Predicted Text:", predicted_text)

