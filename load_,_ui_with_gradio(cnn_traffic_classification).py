# -*- coding: utf-8 -*-
"""load , UI with gradio(CNN_traffic_classification).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-WIk305lBvkAUx9pnantHsx0Wm0tZ9fy
"""

import pandas as pd

# Load the CSV file
file_path = '/content/drive/MyDrive/labels.csv'  # Update with your actual file path
labels_df = pd.read_csv(file_path)

# Convert the DataFrame to a dictionary
labels_dict = labels_df.to_dict(orient='list')

# Display the dictionary

labels_dict

!pip install gradio

import gradio as gr
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image as keras_image
import numpy as np

# Define the labels dictionary
labels_dict = {
    'ClassId': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57],
    'Name': ['Speed limit (5km/h)', 'Speed limit (15km/h)', 'Speed limit (30km/h)', 'Speed limit (40km/h)', 'Speed limit (50km/h)', 'Speed limit (60km/h)', 'Speed limit (70km/h)', 'speed limit (80km/h)', 'Dont Go straight or left', 'Dont Go straight or Right', 'Dont Go straight', 'Dont Go Left', 'Dont Go Left or Right', 'Dont Go Right', 'Dont overtake from Left', 'No Uturn', 'No Car', 'No horn', 'Speed limit (40km/h)', 'Speed limit (50km/h)', 'Go straight or right', 'Go straight', 'Go Left', 'Go Left or right', 'Go Right', 'keep Left', 'keep Right', 'Roundabout mandatory', 'watch out for cars', 'Horn', 'Bicycles crossing', 'Uturn', 'Road Divider', 'Traffic signals', 'Danger Ahead', 'Zebra Crossing', 'Bicycles crossing', 'Children crossing', 'Dangerous curve to the left', 'Dangerous curve to the right', 'Unknown1', 'Unknown2', 'Unknown3', 'Go right or straight', 'Go left or straight', 'Unknown4', 'ZigZag Curve', 'Train Crossing', 'Under Construction', 'Unknown5', 'Fences', 'Heavy Vehicle Accidents', 'Unknown6', 'Give Way', 'No stopping', 'No entry', 'Unknown7', 'Unknown8']
}

# Map ClassId to Name
class_labels = labels_dict['Name']
model = load_model('/content/drive/MyDrive/models/CNN_traffic_recognition.h5')

def predict(image):
    try:
        # Preprocess the image
        image = keras_image.img_to_array(image)
        image = tf.image.resize(image, (30, 30))
        image = np.expand_dims(image, axis=0)

        # Perform the prediction
        predictions = model.predict(image)
        predicted_class_index = np.argmax(predictions, axis=1)[0]

        # Map the predicted class index to the class label
        predicted_class = class_labels[predicted_class_index]
        return predicted_class

    except Exception as e:
        return f"Error: {str(e)}"

# Create the Gradio interface
iface = gr.Interface(
    fn=predict,
    inputs=gr.Image(type="pil"),
    outputs=gr.Textbox(),
    title="Image Classification",
    description="Upload an image to get the predicted class label."
)

# Launch the Gradio app
iface.launch()

